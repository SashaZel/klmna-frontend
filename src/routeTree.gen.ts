/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocsImport } from './routes/docs'
import { Route as AboutImport } from './routes/about'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as ProjectIdTaskImport } from './routes/$projectId/task'
import { Route as AdminProjectsIndexImport } from './routes/admin/projects/index'
import { Route as AdminProjectProjectIdIndexImport } from './routes/admin/project/$projectId/index'
import { Route as AdminProjectProjectIdPoolPoolIdIndexImport } from './routes/admin/project/$projectId/pool/$poolId/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TaskTaskIdLazyImport = createFileRoute('/task/$taskId')()
const AdminProjectCreateLazyImport = createFileRoute('/admin/project/create')()
const AdminProjectProjectIdEditLazyImport = createFileRoute(
  '/admin/project/$projectId/edit',
)()
const AdminProjectProjectIdPoolCreateLazyImport = createFileRoute(
  '/admin/project/$projectId/pool/create',
)()

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const TaskTaskIdLazyRoute = TaskTaskIdLazyImport.update({
  id: '/task/$taskId',
  path: '/task/$taskId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/task/$taskId.lazy').then((d) => d.Route))

const ProjectIdTaskRoute = ProjectIdTaskImport.update({
  id: '/$projectId/task',
  path: '/$projectId/task',
  getParentRoute: () => rootRoute,
} as any)

const AdminProjectsIndexRoute = AdminProjectsIndexImport.update({
  id: '/admin/projects/',
  path: '/admin/projects/',
  getParentRoute: () => rootRoute,
} as any)

const AdminProjectCreateLazyRoute = AdminProjectCreateLazyImport.update({
  id: '/admin/project/create',
  path: '/admin/project/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/project/create.lazy').then((d) => d.Route),
)

const AdminProjectProjectIdIndexRoute = AdminProjectProjectIdIndexImport.update(
  {
    id: '/admin/project/$projectId/',
    path: '/admin/project/$projectId/',
    getParentRoute: () => rootRoute,
  } as any,
)

const AdminProjectProjectIdEditLazyRoute =
  AdminProjectProjectIdEditLazyImport.update({
    id: '/admin/project/$projectId/edit',
    path: '/admin/project/$projectId/edit',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/project/$projectId/edit.lazy').then((d) => d.Route),
  )

const AdminProjectProjectIdPoolCreateLazyRoute =
  AdminProjectProjectIdPoolCreateLazyImport.update({
    id: '/admin/project/$projectId/pool/create',
    path: '/admin/project/$projectId/pool/create',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/project/$projectId/pool/create.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminProjectProjectIdPoolPoolIdIndexRoute =
  AdminProjectProjectIdPoolPoolIdIndexImport.update({
    id: '/admin/project/$projectId/pool/$poolId/',
    path: '/admin/project/$projectId/pool/$poolId/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/$projectId/task': {
      id: '/$projectId/task'
      path: '/$projectId/task'
      fullPath: '/$projectId/task'
      preLoaderRoute: typeof ProjectIdTaskImport
      parentRoute: typeof rootRoute
    }
    '/task/$taskId': {
      id: '/task/$taskId'
      path: '/task/$taskId'
      fullPath: '/task/$taskId'
      preLoaderRoute: typeof TaskTaskIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/project/create': {
      id: '/admin/project/create'
      path: '/admin/project/create'
      fullPath: '/admin/project/create'
      preLoaderRoute: typeof AdminProjectCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/projects/': {
      id: '/admin/projects/'
      path: '/admin/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/project/$projectId/edit': {
      id: '/admin/project/$projectId/edit'
      path: '/admin/project/$projectId/edit'
      fullPath: '/admin/project/$projectId/edit'
      preLoaderRoute: typeof AdminProjectProjectIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/project/$projectId/': {
      id: '/admin/project/$projectId/'
      path: '/admin/project/$projectId'
      fullPath: '/admin/project/$projectId'
      preLoaderRoute: typeof AdminProjectProjectIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/project/$projectId/pool/create': {
      id: '/admin/project/$projectId/pool/create'
      path: '/admin/project/$projectId/pool/create'
      fullPath: '/admin/project/$projectId/pool/create'
      preLoaderRoute: typeof AdminProjectProjectIdPoolCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/project/$projectId/pool/$poolId/': {
      id: '/admin/project/$projectId/pool/$poolId/'
      path: '/admin/project/$projectId/pool/$poolId'
      fullPath: '/admin/project/$projectId/pool/$poolId'
      preLoaderRoute: typeof AdminProjectProjectIdPoolPoolIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/docs': typeof DocsRoute
  '/$projectId/task': typeof ProjectIdTaskRoute
  '/task/$taskId': typeof TaskTaskIdLazyRoute
  '/admin': typeof AdminIndexRoute
  '/admin/project/create': typeof AdminProjectCreateLazyRoute
  '/admin/projects': typeof AdminProjectsIndexRoute
  '/admin/project/$projectId/edit': typeof AdminProjectProjectIdEditLazyRoute
  '/admin/project/$projectId': typeof AdminProjectProjectIdIndexRoute
  '/admin/project/$projectId/pool/create': typeof AdminProjectProjectIdPoolCreateLazyRoute
  '/admin/project/$projectId/pool/$poolId': typeof AdminProjectProjectIdPoolPoolIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/docs': typeof DocsRoute
  '/$projectId/task': typeof ProjectIdTaskRoute
  '/task/$taskId': typeof TaskTaskIdLazyRoute
  '/admin': typeof AdminIndexRoute
  '/admin/project/create': typeof AdminProjectCreateLazyRoute
  '/admin/projects': typeof AdminProjectsIndexRoute
  '/admin/project/$projectId/edit': typeof AdminProjectProjectIdEditLazyRoute
  '/admin/project/$projectId': typeof AdminProjectProjectIdIndexRoute
  '/admin/project/$projectId/pool/create': typeof AdminProjectProjectIdPoolCreateLazyRoute
  '/admin/project/$projectId/pool/$poolId': typeof AdminProjectProjectIdPoolPoolIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/docs': typeof DocsRoute
  '/$projectId/task': typeof ProjectIdTaskRoute
  '/task/$taskId': typeof TaskTaskIdLazyRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/project/create': typeof AdminProjectCreateLazyRoute
  '/admin/projects/': typeof AdminProjectsIndexRoute
  '/admin/project/$projectId/edit': typeof AdminProjectProjectIdEditLazyRoute
  '/admin/project/$projectId/': typeof AdminProjectProjectIdIndexRoute
  '/admin/project/$projectId/pool/create': typeof AdminProjectProjectIdPoolCreateLazyRoute
  '/admin/project/$projectId/pool/$poolId/': typeof AdminProjectProjectIdPoolPoolIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/docs'
    | '/$projectId/task'
    | '/task/$taskId'
    | '/admin'
    | '/admin/project/create'
    | '/admin/projects'
    | '/admin/project/$projectId/edit'
    | '/admin/project/$projectId'
    | '/admin/project/$projectId/pool/create'
    | '/admin/project/$projectId/pool/$poolId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/docs'
    | '/$projectId/task'
    | '/task/$taskId'
    | '/admin'
    | '/admin/project/create'
    | '/admin/projects'
    | '/admin/project/$projectId/edit'
    | '/admin/project/$projectId'
    | '/admin/project/$projectId/pool/create'
    | '/admin/project/$projectId/pool/$poolId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/docs'
    | '/$projectId/task'
    | '/task/$taskId'
    | '/admin/'
    | '/admin/project/create'
    | '/admin/projects/'
    | '/admin/project/$projectId/edit'
    | '/admin/project/$projectId/'
    | '/admin/project/$projectId/pool/create'
    | '/admin/project/$projectId/pool/$poolId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutRoute: typeof AboutRoute
  DocsRoute: typeof DocsRoute
  ProjectIdTaskRoute: typeof ProjectIdTaskRoute
  TaskTaskIdLazyRoute: typeof TaskTaskIdLazyRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminProjectCreateLazyRoute: typeof AdminProjectCreateLazyRoute
  AdminProjectsIndexRoute: typeof AdminProjectsIndexRoute
  AdminProjectProjectIdEditLazyRoute: typeof AdminProjectProjectIdEditLazyRoute
  AdminProjectProjectIdIndexRoute: typeof AdminProjectProjectIdIndexRoute
  AdminProjectProjectIdPoolCreateLazyRoute: typeof AdminProjectProjectIdPoolCreateLazyRoute
  AdminProjectProjectIdPoolPoolIdIndexRoute: typeof AdminProjectProjectIdPoolPoolIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutRoute: AboutRoute,
  DocsRoute: DocsRoute,
  ProjectIdTaskRoute: ProjectIdTaskRoute,
  TaskTaskIdLazyRoute: TaskTaskIdLazyRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminProjectCreateLazyRoute: AdminProjectCreateLazyRoute,
  AdminProjectsIndexRoute: AdminProjectsIndexRoute,
  AdminProjectProjectIdEditLazyRoute: AdminProjectProjectIdEditLazyRoute,
  AdminProjectProjectIdIndexRoute: AdminProjectProjectIdIndexRoute,
  AdminProjectProjectIdPoolCreateLazyRoute:
    AdminProjectProjectIdPoolCreateLazyRoute,
  AdminProjectProjectIdPoolPoolIdIndexRoute:
    AdminProjectProjectIdPoolPoolIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/docs",
        "/$projectId/task",
        "/task/$taskId",
        "/admin/",
        "/admin/project/create",
        "/admin/projects/",
        "/admin/project/$projectId/edit",
        "/admin/project/$projectId/",
        "/admin/project/$projectId/pool/create",
        "/admin/project/$projectId/pool/$poolId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/docs": {
      "filePath": "docs.tsx"
    },
    "/$projectId/task": {
      "filePath": "$projectId/task.tsx"
    },
    "/task/$taskId": {
      "filePath": "task/$taskId.lazy.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/admin/project/create": {
      "filePath": "admin/project/create.lazy.tsx"
    },
    "/admin/projects/": {
      "filePath": "admin/projects/index.tsx"
    },
    "/admin/project/$projectId/edit": {
      "filePath": "admin/project/$projectId/edit.lazy.tsx"
    },
    "/admin/project/$projectId/": {
      "filePath": "admin/project/$projectId/index.tsx"
    },
    "/admin/project/$projectId/pool/create": {
      "filePath": "admin/project/$projectId/pool/create.lazy.tsx"
    },
    "/admin/project/$projectId/pool/$poolId/": {
      "filePath": "admin/project/$projectId/pool/$poolId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
